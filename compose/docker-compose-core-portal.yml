version: "3.9"
########################### NETWORKS
# There is no need to create any networks outside this docker-compose file.
# You may customize the network subnets (192.168.90.0/24 and 91.0/24) below as you please.
# Docker Compose version 3.5 or higher required to define networks this way.

networks:
  net-t2-proxy:
    name: net-t2-proxy
    driver: bridge
    ipam:
      config:
        - subnet: 172.16.0.0/24
  default:
    driver: bridge
  net-socket-proxy:
    name: net-socket-proxy
    driver: bridge
    ipam:
      config:
        - subnet: 172.16.1.0/24
########################### SECRETS
secrets:
  htpasswd:
    file: $SECRETDIR/htpasswd
  cloudflare_email:
    file: $SECRETDIR/cloudflare_email
  cloudflare_api_key:
    file: $SECRETDIR/cloudflare_api_key
  google_oauth_config:
    file: $SECRETDIR/google_oauth_config
  sendgridApiKey:
    file: $SECRETDIR/sendgridApiKey

########################### SERVICES
services:
  ############################# FRONTENDS
  traefik:
    container_name: traefik
    image: traefik:2.11.0
    restart: unless-stopped
    command: # CLI arguments
      - --configFile=/traefik.yml
    networks:
      net-t2-proxy:
        ipv4_address: 172.16.0.250 # You can specify a static IP
      net-socket-proxy:
    user: $DOCKERRUNNER:$DOCKERFILES
    read_only: true
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ['CMD', 'traefik', 'healthcheck', '--ping']
      interval: 10s
      timeout: 30s
      retries: 10
      start_period: 30s
    depends_on:
      - socket-proxy
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 8080
        published: 8080
        protocol: tcp
        mode: host
    volumes:
      - $APPDATA/traefik2/rules:/rules # file provider directory
      - $SECRETDIR/traefik2/acme/acme.json:/acme.json # cert location - you must touch this file and change permissions to 600
      - $NONGITDIR/traefik2/traefik.log:/traefik.log # for fail2ban - make sure to touch file before starting container
      - $APPDATA/traefik2/traefik$HOSTTAG.yml:/traefik.yml
    environment:
      - CF_API_EMAIL_FILE=/run/secrets/cloudflare_email
      - CF_API_KEY_FILE=/run/secrets/cloudflare_api_key
      - HTPASSWD_FILE=/run/secrets/htpasswd # HTPASSWD_FILE can be whatever as it is not used/called anywhere.
    secrets:
      - cloudflare_email
      - cloudflare_api_key
      - htpasswd
    labels:
      #- "autoheal=true"
      - "traefik.enable=true"
      # HTTP-to-HTTPS Redirect
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # HTTP Routers
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAINNAMEHOST`)"
      ## Services - API
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      ## Middlewares
      - "traefik.http.routers.traefik-rtr.middlewares=chain-oauth@file"
      ##For Metrics Endpoint
      - "traefik.http.routers.metrics-rtr.entrypoints=https"
      - "traefik.http.routers.metrics-rtr.rule=Host(`metrics.$DOMAINNAMEHOST`)"
      ## Services - API
      - "traefik.http.routers.metrics-rtr.service=prometheus@internal"
      ## Middlewares
      - "traefik.http.routers.metrics-rtr.middlewares=chain-oauth@file"
      - wud.tag.include=^\d+\.\d+\.\d+$$
      - wud.link.template=https://newreleases.io/github/traefik/traefik?version=v$${major}.$${minor}.$${patch}
# Docker Socket Proxy - Security Enchanced Proxy for Docker Socket
  socket-proxy:
    container_name: socket-proxy
    image: tecnativa/docker-socket-proxy
    #restart: always
    restart: unless-stopped
    # profiles:
    # - core
    networks:
      net-socket-proxy:
        ipv4_address: 172.16.1.20 # You can specify a static IP
   # user: $DOCKERRUNNER:$DOCKERFILES
    read_only: true
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:2375/_ping || exit 1
      interval: 10s
      timeout: 30s
      retries: 10
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - /var/lib/haproxy
      - /run/
    environment:
      - LOG_LEVEL=info # debug,info,notice,warning,err,crit,alert,emerg
      ## Variables match the URL prefix (i.e. AUTH blocks access to /auth/* parts of the API, etc.).
      # 0 to revoke access.
      # 1 to grant access.
      ## Granted by Default
      - EVENTS=1
      - PING=1
      - VERSION=1
      ## Revoked by Default
      # Security critical
      - AUTH=0
      - SECRETS=0
      - POST=1 # Ouroboros
      # Not always needed
      - BUILD=0
      - COMMIT=0
      - CONFIGS=0
      - CONTAINERS=1 # Traefik, portainer, etc.
      - DISTRIBUTION=0
      - EXEC=0
      - IMAGES=1 # Portainer
      - INFO=1 # Portainer
      - NETWORKS=1 # Portainer
      - NODES=0
      - PLUGINS=0
      - SERVICES=1 # Portainer
      - SESSION=0
      - SWARM=0
      - SYSTEM=0
      - TASKS=1 # Portaienr
      - VOLUMES=1 # Portainer
    labels:
      - wud.link.template=https://newreleases.io/github/tecnativa/docker-socket-proxy?version=$${raw}
# Google OAuth - Single Sign On using OAuth 2.0
  # https://www.smarthomebeginner.com/google-oauth-with-traefik-docker/
  oauth:
    container_name: oauth
    image: thomseddon/traefik-forward-auth:2.2.0
    # image: thomseddon/traefik-forward-auth:2.1-arm # Use this image with Raspberry Pi
    #restart: always
    restart: unless-stopped
    # profiles:
    # - core
    networks:
      - net-t2-proxy
    user: $DOCKERRUNNER:$DOCKERFILES
    read_only: true
    security_opt:
      - no-new-privileges:true
    environment:
      - CONFIG=/config
      - COOKIE_DOMAIN=$DOMAINNAMEROOT
      - INSECURE_COOKIE=false
      - AUTH_HOST=oauth.$DOMAINNAMEROOT
      - URL_PATH=/_oauth
      - LOG_LEVEL=warn
      - LOG_FORMAT=text
      - LIFETIME=86400 # 1 day
      - DEFAULT_ACTION=auth
      - DEFAULT_PROVIDER=google
    secrets: # had trouble getting secrets to work: https://github.com/thomseddon/traefik-forward-auth/issues/155#issuecomment-664630985
      - source: google_oauth_config
        target: /config
        uid: '$DOCKERRUNNER'
        gid: '$DOCKERFILES'
        mode: 0444
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.oauth-rtr.tls=true"
      - "traefik.http.routers.oauth-rtr.entrypoints=https"
      - "traefik.http.routers.oauth-rtr.rule=Host(`oauth.$DOMAINNAMEROOT`)"
      ## Middlewares
      - "traefik.http.routers.oauth-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.oauth-rtr.service=oauth-svc"
      - "traefik.http.services.oauth-svc.loadbalancer.server.port=4181"
      - wud.tag.include=^\d+\.\d+\.\d+-arm$$
      - wud.link.template=https://newreleases.io/github/thomseddon/traefik-forward-auth?version=v$${major}.$${minor}.$${patch}
whatsupdocker:
    image: ghcr.io/patmagauran/whats-up-docker:latest
    container_name: wud
 #   user: $DOCKERRUNNER:$DOCKERFILES
    restart: unless-stopped
    read_only: true
    security_opt:
      - no-new-privileges:true
    env_file:
      - $SECRETDIR/wud.env
      - $APPDATA/wud.env
      - $APPDATA/wud-portal.env
    healthcheck:
      test: wget --no-verbose --tries=1 --no-check-certificate --spider http://localhost:3000
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 10s
    depends_on:
      - traefik
      - socket-proxy
    volumes:
      # - $DOCKERDIR/docker-compose-apps$HOSTTAG.yml:/wud/docker-compose-apps.yaml
      # - $DOCKERDIR/docker-compose-Core.yml:/wud/docker-compose-core.yaml
      # - $DOCKERDIR/docker-compose-management$HOSTTAG.yml:/wud/docker-compose-mgmt.yaml
      - /store
      - $SECRETDIR/id_rsa:/home/node/.ssh/id_rsa
      - $SECRETDIR/id_rsa.pub:/home/node/.ssh/id_rsa.pub
    networks:
      - net-t2-proxy
      - net-socket-proxy
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.whatsupdocker-rtr.entrypoints=https"
      - "traefik.http.routers.whatsupdocker-rtr.rule=Host(`wud.$DOMAINNAME0`)"
      ## Middlewares
      - "traefik.http.routers.whatsupdocker-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.whatsupdocker-rtr.service=whatsupdocker-svc"
      - "traefik.http.services.whatsupdocker-svc.loadbalancer.server.port=3000"
 backup:
    container_name: autorestic
    image: ghcr.io/patmagauran/autorestic-docker:main
    user: $DOCKERRUNNER:$DOCKERFILES
    read_only: true
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    environment:
      BACKUP_ON_START: "true"
    env_file:
      - $SECRETDIR/autorestic.env
    volumes:
      - /var/dockers/HomeServerConfigs:/mnt/HomeServerConfigs:ro
      - $APPDATA/autorestic/autorestic-portal.yml:/app/autorestic.yml:ro
      - $NONGITDIR/autorestic/cache:/.cache/restic
      - /app/
      - /.cache
      - /tmp
      - /backups:/backups
  rclone:
    image: pfidr/rclone:1.63.0
    restart: unless-stopped
    volumes:
      - $APPDATA/rclone:/config
      - /backups/:/data
    env_file:
      - $SECRETDIR/rclone.env
    environment:
      # see more flags at https://hub.docker.com/r/pfidr/rclone/dockerfile
      - "UID=$DOCKERRUNNER"
      - "GID=$DOCKERFILES"
      - "TZ=$TZ"
      - "SYNC_SRC=/data"
      - "SYNC_DEST=b2:$B2_BUCKET"
      - "CHECK_URL="
      # visit https://crontab.guru/
      - "CRON=30 */6 * * *" 
      - "FORCE_SYNC=1"
      - "SYNC_OPTS=-v --b2-hard-delete"
